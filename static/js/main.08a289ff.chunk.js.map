{"version":3,"sources":["Calculator/Claculator.js","App.js","reportWebVitals.js","index.js","Calculator/Calculator.module.css"],"names":["Calculator","toFar","this","props","distance","push","splice","toClose","className","classes","type","placeholder","value","Math","round","miliradians","readOnly","onChange","inputChange","buttons","style","padding","onClick","calculateDistance","resetValue","join","React","Component","App","mil","state","setState","event","target","addValues","addValuesInList","position","color","fontSize","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PA4CeA,E,4JAxCb,WACE,IAAMC,EAAQ,CAAC,YACXC,KAAKC,MAAMC,SAAW,KACxBH,EAAMI,KAAK,eAEXJ,EAAMK,OAAO,CAAC,IAGhB,IAAMC,EAAU,CAAC,YAOjB,OANIL,KAAKC,MAAMC,SAAW,KAA+B,KAAxBF,KAAKC,MAAMC,SAC1CG,EAAQF,KAAK,eAEbE,EAAQD,OAAO,CAAC,IAIhB,sBAAKE,UAAWC,IAAQT,WAAxB,UACE,uBACAU,KAAK,OACLC,YAAY,mBACZC,MAAOC,KAAKC,MAAMZ,KAAKC,MAAMY,aAC7BC,UAAQ,IAER,uBACAN,KAAK,OACLC,YAAY,qBACZC,MAAOV,KAAKC,MAAMC,SAClBa,SAAUf,KAAKC,MAAMe,cAErB,sBAAKV,UAAWC,IAAQU,QAAxB,UACE,wBAAQC,MAAO,CAACC,QAAS,aAAcX,KAAK,SAASY,QAASpB,KAAKC,MAAMoB,kBAAzE,eACA,wBAAQb,KAAK,QAAQY,QAASpB,KAAKC,MAAMqB,WAAzC,sBAEF,oBAAIhB,UAAWP,EAAMwB,KAAK,KAA1B,sBACA,oBAAIjB,UAAWD,EAAQkB,KAAK,KAA5B,+B,GAnCiBC,IAAMC,WCkDhBC,E,kDA/Cb,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IAOVoB,kBAAoB,WAClB,IACMM,GAAO,KADO,EAAKC,MAAM1B,UACE,KAAK,IAC3B,OAARyB,GACD,EAAKE,SAAS,CACZhB,YAAac,KAbA,EAkBnBX,YAAc,SAACc,GACb,EAAKD,SAAS,CAAC3B,SAAU4B,EAAMC,OAAOrB,SAnBrB,EAsBnBY,WAAa,WACX,EAAKO,SAAS,CACZ3B,SAAU,GACVW,YAAa,MAvBb,EAAKe,MAAQ,CACX1B,SAAU,GACVW,YAAa,IAJA,E,0CA6BnB,WACE,OACA,sBAAKP,UAAU,WAAf,UACE,2EACA,cAAC,EAAD,CACAJ,SAAUF,KAAK4B,MAAM1B,SACrBW,YAAab,KAAK4B,MAAMf,YACxBQ,kBAAmBrB,KAAKqB,kBACxBL,YAAahB,KAAKgB,YAClBM,WAAYtB,KAAKsB,WACjBU,UAAWhC,KAAKiC,kBAEhB,mBAAGf,MAAO,CAACgB,SAAU,QAASC,MAAO,OAAQC,SAAU,GAAIC,QAAS,IAApE,4B,GA3CYb,IAAMC,WCQTa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,WAAa,+BAA+B,QAAU,+B","file":"static/js/main.08a289ff.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Calculator.module.css'\n\nclass Calculator extends React.Component{\n  render(){\n    const toFar = ['distance'];\n    if (this.props.distance > 1600) {\n      toFar.push('showDisplay')\n    } else {\n      toFar.splice([1])\n    }\n\n    const toClose = ['distance'];\n    if (this.props.distance < 100 && this.props.distance !== '') {\n      toClose.push('showDisplay')\n    } else {\n      toClose.splice([1])\n    }\n\n    return(\n      <div className={classes.Calculator}>\n        <input \n        type='text' \n        placeholder='Distance in mil.' \n        value={Math.round(this.props.miliradians)}\n        readOnly>\n        </input>\n        <input \n        type='text'\n        placeholder='Distance in meters' \n        value={this.props.distance} \n        onChange={this.props.inputChange}>\n        </input>\n        <div className={classes.buttons}>\n          <button style={{padding: '10px 30px'}} type='submit' onClick={this.props.calculateDistance}>=</button>\n          <button type='reset' onClick={this.props.resetValue}>Reset</button>\n        </div>\n        <h2 className={toFar.join(' ')}>Too far!</h2>\n        <h2 className={toClose.join(' ')}>Too close!</h2>\n      </div>\n    )\n  }\n}\n\nexport default Calculator;","import './App.css';\nimport React from 'react';\nimport Calculator from './Calculator/Claculator'\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n        distance: '',\n        miliradians: '',\n      }\n    }\n\n  calculateDistance = () => {\n    const oldDistance = this.state.distance;\n    const mil = (1600 - oldDistance)/4.69+800\n    if(mil !== 1142) {\n      this.setState({\n        miliradians: mil\n      })\n    }\n  }\n\n  inputChange = (event) => {\n    this.setState({distance: event.target.value})\n  }\n\n  resetValue = () => {\n    this.setState({\n      distance: '',\n      miliradians: ''\n    })\n  }\n\n  render(){\n    return(\n    <div className='mainPart'>\n      <h1>Arthillerry calculator for Hell Let Loose</h1>\n      <Calculator\n      distance={this.state.distance}\n      miliradians={this.state.miliradians}\n      calculateDistance={this.calculateDistance}\n      inputChange={this.inputChange}\n      resetValue={this.resetValue}\n      addValues={this.addValuesInList}\n      />\n      <p style={{position: 'fixed', color: '#fff', fontSize: 20, bottom: -10}}>by Dred</p>\n    </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calculator\":\"Calculator_Calculator__3JVxg\",\"buttons\":\"Calculator_buttons__BBTfv\"};"],"sourceRoot":""}